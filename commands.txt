docker run -it -p 8080:8080 synedra/deploy
export NG_CMD=prod - set a variable to tell NPM what environment to build after installing all the modules. 
export MONGO_URL='mongodb://maestro:%232naweza@node-deploy-shard-00-00.hnnpi.mongodb.net:27017,node-deploy-shard-00-01.hnnpi.mongodb.net:27017,node-deploy-shard-00-02.hnnpi.mongodb.net:27017/node-deploy?ssl=true&replicaSet=atlas-o39fmk-shard-0&authSource=admin&retryWrites=true&w=majority'

Deploying via git
** Create a local repository to work with **

* Initialize a git repository in the current directory
$ git init
* Tell git to add all files in the directory
$ git add -A
* Commit files
$ git commit -a -m "Initial node-deploy commit"
 
** Setup a target repository **

* Move to a different directory
* Clone the node-deploy repo
$ cd ../
$ git clone node-deploy/ local_clone

* Checkout to a temporary directory
* Change the checked out branch in the local clone because git does not 
  like to do pushes to repositories with the target branch checked out already.
$ cd /local_clone
$ git checkout -b tmp 

* Go back to previous repository
$ cd ../node-deploy

* Remote command
$ git remote add second ../local_clone/
* The remote is going to be named second. And we can find it at local clone. 
  Now if we were creating from a remote system, then the URL would go here 
  instead of the file path
* What the remote does is it links different repositories together so that
  you can push commits from one to the other.

* Make changes to previous directory 
* git commit
* Then push to second repo as master
$ git commit -a -m "Pushing line to local clone"
* -a: commit all changes
$ git push second master

* Checkout the local_clone to master
$cd ../local_clone
$ git checkout master

* Check for changes
